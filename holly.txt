The Holly Programming Language

types: String, Number, Object, Array, Boolean
binary operators: | - + * ^ / % >> << & == !=
compound: |= -= += *= ^= /= %= >>= <<= &= 
unary operator: ! ~ 
comparison: < > == <= >= and or
reserved symbols: \ { } [ ] : = ( ) ; , " ' -- :: ..
other reserved words: let if else return while fn true false nil for in

GRAMMER - BNF

literal ::=
  Number |
  Boolean |
  Nil     

expression ::=
  literal |
  value |
  unop expression |
  expression binop expression |
  `(` expression `)` 
  
value ::=
  `(` value `)` access |
  object access |
  array access |
  Name access |
  lambda access
  
access ::=
  `.` Name access |
  `[` expressions `]` access |
  functioncallend access |
  nil

block ::=
  `{` statementlist `}`

lambda ::=
  `fn` namelist block | 
  `fn` namelist `->` expression 
  
functioncallend ::=
  `(` expressionlist `)`
  
expressionlist ::=
  expression |
  expression `,` expressionlist |
  nil
  
namelist ::=
  name |
  name `,` namelist |
  nil
  
name ::= 
  Name |
  Name typehint
  
typehint ::=
  `:` Type
  
ifstatement ::=
  `if` expression block elsestatement |
  `if` expression `:` statement elsestatement 
  
elsestatement ::=
  `else` block |
  `else` `:` statement |
  `else` ifstatement |
  nil
  
whilestatement ::=
  `while` block |
  `while` `:` statement
  
forstatement ::=
  `for` Name [ `,` Name ] `in` iterable block |         
  `for` Name [ `,` Name ] `in` iterable `:` statement 
  
iterable ::=
  spread |
  Object |
  Array |
  String
  
spread ::=
  Number `..` Number  

object ::=
  `{` pairlist `}`
  
array ::=
  `[` expressionlist `]`
  
pairlist ::=
  Name `:` expression |
  Name `:` expression `,` pairlist |
  nil
  
statement ::=
  ifstatement |
  whilestatement |
  `return` expression |
  `break` |
  `let` Name `=` expression |
  fn Name namelist block |
  fn Name namelist `->` expression |
  value `=` expression |        *value must not be a functioncall
  value                         *value must be a functioncall
  
statementlist ::=
  statement [ `;` ] statementlist | *semicolon is optional
  nil
  
start ::=
  statementlist


  
POSSIBLE GRAMMAR AMBIGUITIES

1. Function call issues

fn fname {
 -- stuff
}

and

fn x {
 -- stuff with x
}()

These are both valid statements. The second is the direct calling of an
anonymous function, the first is a function declaration. We'd have no
way of knowing which was which until the function call. A possible solution
is to have all value references wrapped in parenthesis. But that would make all
function calling awkward: (something)(), (object.name[0])()
Another possible solution is to get rid of function declarations all together, since
they are just sugar for assigning anonymous functions to variables.

2. Lack of semicolon issues

if x > 2 : return

something()

There's no way of knowing whether or not we're supposed to return
the result of the function call. A possible solution is to require that
return returns a value (like nil).  


OTHER RANDOM NOTES

I will probably get rid of integers at least for the first version. IEEE-754
floating point numbers are far simpler to deal with.
