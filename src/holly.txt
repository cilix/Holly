The Holly Programming Language

types: String, Number, Array, Boolean, Function, Nil
binary operators: | - + * ^ / % >> << & 
assignment: |= -= += *= ^= /= %= >>= <<= &= =
unary operator: ! ~ * -
comparison: < > == != <= >= and or
reserved symbols: \ { } [ ] : ( ) ; , " ' -- :: .. . ->
other reserved words: let if else return while fn true false nil for in break struct use new

GRAMMER - BNF

assignment ::=
  OrEquals |
  MinusEquals |
  PlusEquals |
  MultEquals |
  DivEquals |
  XorEquals |
  ModEquals |
  RshiftEquals |
  LshiftEquals |
  AndEquals |
  Equals

comparison ::=
  LessThan |
  GreaterThan |
  EqualTo |
  NotEqualTo |
  LessThanOrEqualTo |
  GreaterThanOrEqualTo |
  And |
  Or
 
arithmetic ::=
  LogicalOr |
  Subtract |
  Add |
  Multiply |
  Xor |
  Divide |
  Mod |
  RightShift |
  LeftShift |
  LogicalAnd

binop ::=
  arithmetic |
  comparison

unop ::=
  BooleanNot |
  LogicalNot |
  WeakRef |
  Negate 

literal ::=
  Number |
  Boolean |
  String |
  Nil     

expression ::=
  literal |
  value |
  unop expression |
  expression binop expression |
  `(` expression `)` valuesuffix
  
value ::=
  array |
  lambda |
  `new` Name { expressionlist } |
  Name valuesuffix 
  
valuesuffix ::=
  `.` Name `(` expressionlist `)` valuesuffix |
  `:` Name valuesuffix |
  `[` expression `]` valuesuffix |  
  `(` expressionlist `)` valuesuffix |
  nil

block ::=
  `{` statementlist `}`

lambda ::=
  `fn` namelist block | 
  `fn` namelist `->` expression 
  
expressionlist ::=
  expression |
  expression `,` expressionlist |
  nil
  
namelist ::=
  name |
  name `,` namelist |
  nil
  
name ::= 
  Name |
  Name typehint
  
typehint ::=
  `:` Type
  
ifstatement ::=
  `if` expression block elsestatement |
  `if` expression statement elsestatement
  
elsestatement ::=
  `else` block |
  `else` statement |
  `else` ifstatement |
  nil
  
whilestatement ::=
  `while` expression block |
  `while` expression statement
  
forstatement ::=
  `for` Name [ `,` Name ] `in` iterable block |         
  `for` Name [ `,` Name ] `in` iterable statement 
  
iterable ::=
  spread |
  Array |
  String
  
spread ::=
  Number `..` Number  
  
array ::=
  `[` expressionlist `]`

functionstatement ::=
  `fn` Name namelist block | 
  `fn` Name namelist `->` expression 

structbody
  `use` Name structbody |
  Name structbody |
  nil

structstatement ::=
  `struct` Name `{` structbody `}`
  
statement ::=
  ifstatement |
  whilestatement |
  forstatement |
  `return` expression |
  structstatement |
  `break` |
  `let` Name [ assignment expression ] |
  functionstatement |                         *sugar for assigning a lambda to a variable
  value [ assignment expression ]             *if not an assignment, then must be a functioncall
                                        
statementlist ::=
  statement statementlist | 
  nil
  
start ::=
  statementlist



CODE SAMPLES

struct Animal {
  height
  speed
  position
  isrunning
}

struct Bear {
  use Animal
  name
}
