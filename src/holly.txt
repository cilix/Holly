The Holly Programming Language

types: String, Number, Object, Array, Boolean
binary operators: | - + * ^ / % >> << & 
assignment: |= -= += *= ^= /= %= >>= <<= &= =
unary operator: ! ~ * -
comparison: < > == != <= >= and or
reserved symbols: \ { } [ ] : ( ) ; , " ' -- :: .. . ->
other reserved words: let if else return while fn true false nil for in break

GRAMMER - BNF

assignment ::=
  OrEquals |
  MinusEquals |
  PlusEquals |
  MultEquals |
  DivEquals |
  XorEquals |
  ModEquals |
  RshiftEquals |
  LshiftEquals |
  AndEquals |
  Equals

comparison ::=
  LessThan |
  GreaterThan |
  EqualTo |
  NotEqualTo |
  LessThanOrEqualTo |
  GreaterThanOrEqualTo |
  And |
  Or
 
arithmetic ::=
  LogicalOr |
  Subtract |
  Add |
  Multiply |
  Xor |
  Divide |
  Mod |
  RightShift |
  LeftShift |
  LogicalAnd

binop ::=
  arithmetic |
  comparison

unop ::=
  BooleanNot |
  LogicalNot |
  WeakRef |
  Negate 

literal ::=
  Number |
  Boolean |
  String |
  Nil     

expression ::=
  literal |
  value |
  unop expression |
  expression binop expression |
  `(` expression `)` valuesuffix
  
value ::=
  object |
  array |
  lambda |
  Name valuesuffix 
  
access ::=
  `.` Name valuesuffix |
  `[` expression `]` valuesuffix |  
  
functioncallsuffix ::=
  `(` expressionlist `)` valuesuffix
  
valuesuffix ::=
  access |
  functioncallsuffix |
  nil

block ::=
  `{` statementlist `}`

lambda ::=
  `fn` namelist block | 
  `fn` namelist `->` expression 
  
expressionlist ::=
  expression |
  expression `,` expressionlist |
  nil
  
namelist ::=
  name |
  name `,` namelist |
  nil
  
name ::= 
  Name |
  Name typehint
  
typehint ::=
  `:` Type
  
ifstatement ::=
  `if` expression block elsestatement |
  `if` expression statement elsestatement
  
elsestatement ::=
  `else` block |
  `else` statement |
  `else` ifstatement |
  nil
  
whilestatement ::=
  `while` expression block 
  
forstatement ::=
  `for` Name [ `,` Name ] `in` iterable block |         
  `for` Name [ `,` Name ] `in` iterable `:` statement 
  
iterable ::=
  spread |
  Object |
  Array |
  String
  
spread ::=
  Number `..` Number  

object ::=
  `{` pairlist `}`
  
array ::=
  `[` expressionlist `]`
  
pairlist ::=
  Name `:` expression |
  Name `:` expression `,` pairlist |
  nil

functionstatement ::=
  `fn` Name namelist block | 
  `fn` Name namelist `->` expression 

functioncall ::=
  Name valuesuffix                    *value must be a functioncall 
  `(` expression `)` valuesuffix      *this too
  
statement ::=
  ifstatement |
  whilestatement |
  forstatement |
  `return` expression |
  `break` |
  `let` Name [ assignment expression ] |
  functionstatement |                 *sugar for assigning a lambda to a variable
  value assignment expression |       *value must not be a functioncall 
  functioncall
                                        

statementlist ::=
  statement [ `;` ] statementlist | *semicolon is optional
  nil
  
start ::=
  statementlist



CODE SAMPLES

let Person = fn name, age {
  return { 
    name: name,
    age: age,
    speak: fn self {
      print('Hello, my name is ' + self.name)
    }
  }
}

-- or, sugar for functions returning a single expression
let Person = fn name, age -> 
  { name: name, age: age, 
    speak: fn self -> 
      print('hello, my name is ' + self.name) }

let bob = Person('bob', 25)

bob.speak(bob)

let add = fn x, y -> x + y

let a = add(2, 3)


-- parsing a variable from a string (translated from c)
let name = fn s, v {
  let i = 0
  let b = nil
  while 
    hl_isalpha(v[i]) or 
    hl_isdigit(v[i]) o
    v[i] == '_' {
    i += 1
  }
  if i == 0 
    return ""
  return slice(v, i)
}


