let Person = fn name, age {
  return { 
    name: name,
    age: age,
    speak: fn self {
      print(/-'Hello, my name is ' + self.name-/) 
    }
  }
}

-- or, sugar for functions returning a single expression
let Person = fn name, age -> 
  { name: name, age: age, 
    speak: fn self -> 
      print('hello, my name is ' + self.name) }

let bob = Person('b\x6fb') -- string with hex literal in it 0x6f is 111 or 'o'

bob.speak(bob, 25)

let add = fn x, y -> x + y

let a = add(2, 4)

fn hl_pname s: Number, v {
  let i = 0
  let b = nil

  while hl_isalpha(v[i]) 
     or hl_isdigit(v[i]) 
     or v[i] == '_' { i += 1 }

  if i > 20 return returnVal

  return slice(v)
}

-- demonstrating how insignificant whitespace is

fish.sticks[(((('are')))) * (((5+ 4.123424852 +

    (((2)))  )))].great(to, 



  Eat)()(  )(               )()   



  .         noway[
                                yes] 
                                = 4
